package com.safecharge.request;

import javax.validation.ConstraintViolationException;
import javax.validation.constraints.Size;

import com.safecharge.request.builder.SafechargeBuilder;
import com.safecharge.util.Constants;
import com.safecharge.util.ValidChecksum;
import com.safecharge.util.ValidationUtils;

/**
 * Copyright (C) 2007-2017 SafeCharge International Group Limited.
 * <p>
 * Request to obatain a list of all existing subscriptions.
 * <p>
 * The results can be filtered by the input params.
 *
 * @author <a mailto:nikolad@safecharge.com>Nikola Dichev</a>
 * @see CreateSubscriptionRequest
 * @see CancelSubscriptionRequest
 * @see GetSubscriptionPlansRequest
 * @since 6/5/2017
 */
@ValidChecksum(orderMappingName = Constants.ChecksumOrderMapping.GET_CASHIER_SUBSCRIPTIONS)
public class GetSubscriptionsListRequest
        extends SafechargeRequest {

    /**
     * The firstResult is a record number from which the subset starts.
     * If there is no firstResult, the default value will be '0â€™.
     */
    private int firstResult = 0;
    /**
     * The maxResult is a number of records of the subset that has to be displayed.
     * If there is no maxResult, the default value is set for 1000 records.
     * If maxResult is set to 0, 1000 records are returned(the default limit).
     */
    private int maxResults = 0;
    /**
     * Allows filtering base on the subscription status.
     */
    private String subscriptionStatus;
    /**
     * This parameter is a unique identifier for each customer generated by you.
     */
    @Size(max = 255, message = "userTokenId value size must be up to 255 characters")
    private String userTokenId;

    public static Builder builder() {
        return new Builder();
    }

    public int getFirstResult() {
        return firstResult;
    }

    public void setFirstResult(int firstResult) {
        this.firstResult = firstResult;
    }

    public int getMaxResults() {
        return maxResults;
    }

    public void setMaxResults(int maxResults) {
        this.maxResults = maxResults;
    }

    public String getSubscriptionStatus() {
        return subscriptionStatus;
    }

    public void setSubscriptionStatus(String subscriptionStatus) {
        this.subscriptionStatus = subscriptionStatus;
    }

    public String getUserTokenId() {
        return userTokenId;
    }

    public void setUserTokenId(String userTokenId) {
        this.userTokenId = userTokenId;
    }

    public static class Builder extends SafechargeBuilder<GetSubscriptionsListRequest.Builder> {

        private int firstResult = 0;
        private int maxResults = 0;
        private String subscriptionStatus;
        private String userTokenId;

        /**
         * Adds {@code firstResult} param to the request. It can be used to filter results, based on their index.
         *
         * @param firstResult index from which the returned subscription list will start. If not set, default is 0
         * @return this object
         */
        public GetSubscriptionsListRequest.Builder addFirstResult(int firstResult) {
            this.firstResult = firstResult;
            return this;
        }

        /**
         * Adds {@code maxResults} param to the request. It is used to limit the number of the returned subscriptions.
         *
         * @param maxResults max number of records to be returned. If not set or set to 0, the limit is 1000
         * @return this object
         */
        public GetSubscriptionsListRequest.Builder addMaxResults(int maxResults) {
            this.maxResults = maxResults;
            return this;
        }

        /**
         * Adds {@code subscriptionStatus} param to the request. The returned results are filtered based on the passed
         * subscription status.
         * <p>
         * Possible values are: INITIALIZING, ACTIVE, INACTIVE, CANCELED, but for the most up-to-date list of possible
         * values check <a href="https://www.safecharge.com/docs/api/?java#getSubscriptionsList">the API documentation.</a>
         *
         * @param subscriptionStatus a {@link String} value representing a possible subscription status
         * @return this object
         */
        public GetSubscriptionsListRequest.Builder addSubscriptionStatus(String subscriptionStatus) {
            this.subscriptionStatus = subscriptionStatus;
            return this;
        }

        /**
         * Adds user token id to the request.
         *
         * @param userTokenId the user token as {@link String}
         * @return this object
         */
        public GetSubscriptionsListRequest.Builder addUserTokenId(String userTokenId) {
            this.userTokenId = userTokenId;
            return this;
        }

        @Override
        public String toString() {
            final StringBuilder sb = new StringBuilder("Builder{");
            sb.append("firstResult=")
                    .append(firstResult);
            sb.append(", maxResults=")
                    .append(maxResults);
            sb.append(", subscriptionStatus='")
                    .append(subscriptionStatus)
                    .append('\'');
            sb.append(", userTokenId='")
                    .append(userTokenId)
                    .append('\'');
            sb.append(", ")
                    .append(super.toString());
            sb.append('}');
            return sb.toString();
        }

        /**
         * Builds the request.
         *
         * @return {@link SafechargeRequest} object build from the params set by this builder
         * @throws ConstraintViolationException if the validation of the params fails
         */
        @Override
        public SafechargeBaseRequest build() throws ConstraintViolationException {
            GetSubscriptionsListRequest getSubscriptionListRequest = new GetSubscriptionsListRequest();
            getSubscriptionListRequest.setFirstResult(firstResult);
            getSubscriptionListRequest.setMaxResults(maxResults);
            getSubscriptionListRequest.setSubscriptionStatus(subscriptionStatus);
            getSubscriptionListRequest.setUserTokenId(userTokenId);
            return ValidationUtils.validate(super.build(getSubscriptionListRequest));
        }
    }
}
